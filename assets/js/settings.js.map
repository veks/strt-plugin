{"version":3,"file":"settings.js","sources":["../../node_modules/@wordpress/is-shallow-equal/build-module/objects.js","../../node_modules/@wordpress/is-shallow-equal/build-module/arrays.js","../../src/js/base/types/array.js","../../src/js/base/types/isNull.js","../../src/js/base/types/object.js","../../src/js/base/types/shallow-equal.js","../../src/js/settings/utils.js","../../src/js/settings/index.js"],"sourcesContent":["/**\n * Internal dependencies\n */\n\n/**\n * Returns true if the two objects are shallow equal, or false otherwise.\n *\n * @param a First object to compare.\n * @param b Second object to compare.\n *\n * @return Whether the two objects are shallow equal.\n */\nexport default function isShallowEqualObjects(a, b) {\n  if (a === b) {\n    return true;\n  }\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < aKeys.length) {\n    const key = aKeys[i];\n    const aValue = a[key];\n    if (\n    // In iterating only the keys of the first object after verifying\n    // equal lengths, account for the case that an explicit `undefined`\n    // value in the first is implicitly undefined in the second.\n    //\n    // Example: isShallowEqualObjects( { a: undefined }, { b: 5 } )\n    aValue === undefined && !b.hasOwnProperty(key) || aValue !== b[key]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n//# sourceMappingURL=objects.js.map","/**\n * Returns true if the two arrays are shallow equal, or false otherwise.\n *\n * @param a First array to compare.\n * @param b Second array to compare.\n *\n * @return Whether the two arrays are shallow equal.\n */\nexport default function isShallowEqualArrays(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0, len = a.length; i < len; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n//# sourceMappingURL=arrays.js.map","/**\r\n * Проверяет, является ли значение массивом.\r\n *\r\n * В отличие от стандартного `Array.isArray`, дополнительно исключает `null` и `undefined`.\r\n *\r\n * @param {*} term — значение для проверки\r\n * @returns {boolean} — `true`, если значение является массивом\r\n *\r\n * @example\r\n * isArray([])            // true\r\n * isArray([1, 2, 3])     // true\r\n * isArray(null)          // false\r\n * isArray(undefined)     // false\r\n * isArray('string')      // false\r\n */\r\nexport const isArray = (term) => {\r\n  return term !== null && typeof term !== 'undefined' && Array.isArray(term)\r\n}","/**\r\n * Проверяет, является ли значение null.\r\n *\r\n * @param {*} term - Проверяемое значение.\r\n * @returns {boolean} true, если term === null, иначе false.\r\n */\r\nexport const isNull = (term) => {\r\n  return term === null\r\n}\r\n\r\n/**\r\n * Проверяет, что значение не равно ни null, ни undefined.\r\n *\r\n * @param {*} value - Проверяемое значение.\r\n * @returns {boolean} true, если value не null и не undefined.\r\n */\r\nexport const nonNullable = (value) => {\r\n  return value !== null && value !== undefined\r\n}\r\n","import { isArray } from './array.js'\r\nimport { isNull } from './isNull.js'\r\n\r\n/**\r\n * Проверяет, является ли значение объектом (не массивом и не null).\r\n *\r\n * @param {*} term - Проверяемое значение\r\n * @returns {boolean} true, если term — объект, иначе false\r\n */\r\nexport const isObject = (term) => {\r\n  return !isNull(term) && typeof term === 'object' && term.constructor === Object && !isArray(term)\r\n}\r\n\r\n/**\r\n * Проверяет, есть ли у объекта собственное свойство prop\r\n *\r\n * @param {object} obj - Объект для проверки\r\n * @param {string} prop - Имя свойства\r\n * @returns {boolean} true, если obj имеет prop как собственное свойство\r\n */\r\nexport const objectHasProp = (obj, prop) => {\r\n  return isObject(obj) && prop in obj\r\n}","import { isShallowEqualArrays, isShallowEqualObjects } from '@wordpress/is-shallow-equal'\r\nimport { useRef } from '@wordpress/element'\r\nimport { isArray } from './array.js'\r\nimport { isObject } from './object.js'\r\n\r\n/**\r\n * Выполняет поверхностное (shallow) сравнение двух значений.\r\n *\r\n * - Если оба значения являются простыми объектами → используется `isShallowEqualObjects`\r\n * - Если оба значения являются массивами → используется `isShallowEqualArrays`\r\n * - В остальных случаях используется строгое сравнение (`===`)\r\n *\r\n * @param {unknown} a - Первое значение для сравнения.\r\n * @param {unknown} b - Второе значение для сравнения.\r\n * @returns {boolean} Возвращает true, если значения поверхностно равны, иначе false.\r\n */\r\nexport const shallowEqual = (a, b) => {\r\n  if (a && b) {\r\n    if (isObject(a) && isObject(b)) {\r\n      return isShallowEqualObjects(a, b)\r\n    } else if (isArray(a) && isArray(b)) {\r\n      return isShallowEqualArrays(a, b)\r\n    }\r\n  }\r\n\r\n  return a === b\r\n}\r\n\r\n/**\r\n * Хук React, который сохраняет предыдущее значение,\r\n * обновляя его только в том случае, если новое значение\r\n * не является поверхностно равным предыдущему.\r\n *\r\n * Полезно для оптимизации рендеров при работе с объектами и массивами.\r\n *\r\n * @template T\r\n * @param {T} value - Текущее значение.\r\n * @returns {T} Последнее сохранённое значение (поверхностно сравниваемое).\r\n */\r\nexport function useShallowEqual (value) {\r\n  const ref = useRef(value)\r\n\r\n  if (!shallowEqual(value, ref.current)) {\r\n    ref.current = value\r\n  }\r\n\r\n  return ref.current\r\n}\r\n\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * Isvek (v1.0.0): utils.js\r\n * Licensed under MIT[](https://isvek.ru/main/LICENSE.md)\r\n * --------------------------------------------------------------------------\r\n *\r\n * Модуль для управления глобальными настройками приложения в JavaScript.\r\n * Используется для чтения, записи и подписки на изменения настроек в контексте\r\n * WordPress и WooCommerce. Настройки хранятся в объекте window.strtSettings,\r\n * а изменения синхронизируются через события `strt:settings` и `strt:settings:<key>`.\r\n *\r\n * @module utils\r\n */\r\n\r\nimport { shallowEqual } from '../base/types/shallow-equal.js'\r\n\r\n/**\r\n * Пространство имен для настроек приложения.\r\n * Используется для формирования ключей настроек и событий (например, `strtSettings`).\r\n * @type {string}\r\n */\r\nexport const NAMESPACE = 'strt'\r\n\r\n/**\r\n * Ссылка на глобальный объект window или пустой объект для серверного окружения.\r\n * Используется для безопасного доступа к глобальным настройкам и событиям в браузере.\r\n * @type {Window|Object}\r\n */\r\nconst windowRef = typeof window !== 'undefined' ? window : {}\r\n\r\n/**\r\n * Объект настроек, содержащий данные приложения (например, favoriteProductCount, cartContentsCount).\r\n * Инициализируется из window.strtSettings, если он существует, иначе создается пустой объект.\r\n * @type {Object.<string, any>}\r\n */\r\nconst settings = typeof windowRef[`${NAMESPACE}Settings`] === 'object' ? windowRef[`${NAMESPACE}Settings`] : {}\r\n\r\n/**\r\n * Название события, вызываемого при любом изменении настроек.\r\n * Формат: strt:settings. Передает объект { key, value } или массив [{ key, value }] в свойстве detail.\r\n * @type {string}\r\n */\r\nconst ROOT_EVENT = `${NAMESPACE}:settings`\r\n\r\n/**\r\n * Генерирует имя события для конкретного ключа настройки.\r\n * Формат: strt:settings:<key>. Передает значение настройки в свойстве detail.\r\n * @param {string} key - Ключ настройки (например, 'favoriteProductCount').\r\n * @returns {string} Имя события для указанного ключа.\r\n */\r\nconst KEY_EVENT = (key) => `${NAMESPACE}:settings:${key}`\r\n\r\n/**\r\n * Проверяет, доступен ли метод dispatchEvent в windowRef (для браузерного окружения).\r\n * @type {boolean}\r\n */\r\nconst canDispatch = typeof windowRef.dispatchEvent === 'function'\r\n\r\n/**\r\n * Проверяет, доступен ли метод addEventListener в windowRef (для браузерного окружения).\r\n * @type {boolean}\r\n */\r\nconst canListen = typeof windowRef.addEventListener === 'function'\r\n\r\n/**\r\n * Получает значение настройки по ключу с возвратом запасного значения, если ключ не найден.\r\n *\r\n * @param {string} name - Ключ настройки (например, 'favoriteProductCount' или 'cartContentsCount').\r\n * @param {any} [fallback=undefined] - Запасное значение, возвращаемое, если ключ отсутствует.\r\n * @param {function(any, any): any} [filter] - Функция-фильтр для нормализации значения (val, fb).\r\n * @returns {any} Значение настройки или запасное значение.\r\n * @throws {Error} Если параметр name не является строкой.\r\n * @example\r\n * const count = getSetting('favoriteProductCount', 0); // Вернет 0, если ключ отсутствует\r\n */\r\nexport const getSetting = (\r\n  name, fallback = undefined, filter = (val, fb) => (typeof val !== 'undefined' ? val : fb)) => {\r\n  if (typeof name !== 'string') {\r\n    throw new Error('getSetting: Параметр \"name\" должен быть строкой')\r\n  }\r\n\r\n  const value = name in settings ? settings[name] : fallback\r\n\r\n  return filter(value, fallback)\r\n}\r\n\r\n/**\r\n * Возвращает копию объекта настроек приложения.\r\n * Используется для безопасного доступа ко всем настройкам без риска их изменения.\r\n *\r\n * @returns {Object.<string, any>} Копия объекта настроек.\r\n * @example\r\n * const allSettings = getSettings(); // { favoriteProductCount: 3, cartContentsCount: 2, ... }\r\n */\r\nexport const getSettings = () => ({ ...settings })\r\n\r\n/**\r\n * Устанавливает значение настройки по ключу и вызывает события при изменении.\r\n * Обновляет window.strtSettings и генерирует события strt:settings и strt:settings:<key>,\r\n * если значение изменилось. События не вызываются, если значение осталось прежним или API событий недоступно.\r\n *\r\n * @param {string} name - Ключ настройки (например, 'cartContentsCount').\r\n * @param {any} value - Новое значение настройки.\r\n * @throws {Error} Если параметр name не является строкой.\r\n * @example\r\n * setSetting('cartContentsCount', 5); // Устанавливает значение и вызывает события\r\n */\r\nexport const setSetting = (name, value) => {\r\n  if (typeof name !== 'string') {\r\n    throw new Error('setSetting: Параметр \"name\" должен быть строкой')\r\n  }\r\n\r\n  const previousValue = settings[name]\r\n\r\n  settings[name] = value\r\n\r\n  const changed = !shallowEqual(previousValue, value)\r\n\r\n  if (canDispatch && changed) {\r\n    try {\r\n      // Инициализация пространства имен в window\r\n      windowRef[NAMESPACE] = windowRef[NAMESPACE] || {}\r\n      windowRef[`${NAMESPACE}Settings`] = settings\r\n\r\n      // Вызов общего события для всех изменений настроек\r\n      windowRef.dispatchEvent(\r\n        new CustomEvent(ROOT_EVENT, {\r\n          detail: { key: name, value },\r\n        }),\r\n      )\r\n\r\n      // Вызов события для конкретного ключа\r\n      windowRef.dispatchEvent(\r\n        new CustomEvent(KEY_EVENT(name), {\r\n            detail: value,\r\n          },\r\n        ),\r\n      )\r\n    } catch (error) {\r\n      console.error(`Ошибка при вызове событий для настройки \"${name}\":`, error)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Устанавливает сразу несколько настроек и вызывает события для измененных ключей.\r\n * Обновляет window.strtSettings и генерирует события strt:settings:<key> для каждого измененного ключа\r\n * и одно групповое событие strt:settings с массивом [{ key, value }].\r\n *\r\n * @param {Object.<string, any>} updates - Объект с парами ключ-значение для обновления.\r\n * @throws {Error} Если updates не является объектом или содержит нестроковые ключи.\r\n * @example\r\n * setSettingsBatch({\r\n *   favoriteProductCount: 3,\r\n *   cartContentsCount: 5\r\n * }); // Обновляет оба ключа и вызывает события\r\n */\r\nexport const setSettingsBatch = (updates) => {\r\n  if (typeof updates !== 'object' || updates === null) {\r\n    throw new Error('setSettingsBatch: Параметр \"updates\" должен быть объектом')\r\n  }\r\n\r\n  const changedSettings = []\r\n\r\n  // Обновляем настройки и собираем измененные пары\r\n  Object.entries(updates).forEach(([key, value]) => {\r\n    if (typeof key !== 'string') {\r\n      throw new Error(`setSettingsBatch: Ключ \"${key}\" должен быть строкой`)\r\n    }\r\n\r\n    const prev = settings[key]\r\n    const changed = !shallowEqual(prev, value)\r\n\r\n    settings[key] = value\r\n\r\n    if (changed) {\r\n      changedSettings.push({ key, value })\r\n    }\r\n  })\r\n\r\n  if (canDispatch && changedSettings.length > 0) {\r\n    try {\r\n      // Инициализация пространства имен в window\r\n      windowRef[NAMESPACE] = windowRef[NAMESPACE] || {}\r\n      windowRef[`${NAMESPACE}Settings`] = settings\r\n\r\n      // Вызов событий для каждого измененного ключа\r\n      changedSettings.forEach(({ key, value }) => {\r\n        windowRef.dispatchEvent(\r\n          new CustomEvent(KEY_EVENT(key), {\r\n            detail: value,\r\n          }),\r\n        )\r\n      })\r\n\r\n      // Вызов группового события с массивом изменений\r\n      windowRef.dispatchEvent(\r\n        new CustomEvent(ROOT_EVENT, {\r\n          detail: changedSettings,\r\n        }),\r\n      )\r\n    } catch (error) {\r\n      console.error('Ошибка при вызове событий в setSettingsBatch:', error)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Подписывает обработчик на изменение конкретной настройки.\r\n * Возвращает функцию для отписки от события. Если API событий недоступно, возвращает пустую функцию.\r\n *\r\n * @param {string} name - Ключ настройки для отслеживания (например, 'favoriteProductCount').\r\n * @param {function(any): void} handler - Функция-обработчик, вызываемая при изменении настройки.\r\n * @returns {function(): void} Функция для отписки от события.\r\n * @throws {Error} Если name не строка или handler не функция.\r\n * @example\r\n * const unsubscribe = onSetting('favoriteProductCount', (count) => {\r\n *   console.log(`Избранное обновлено: ${count}`);\r\n * });\r\n * unsubscribe(); // Отписка от события\r\n */\r\nexport const onSetting = (name, handler) => {\r\n  if (typeof name !== 'string') {\r\n    throw new Error('onSetting: Параметр \"name\" должен быть строкой')\r\n  }\r\n\r\n  if (typeof handler !== 'function') {\r\n    throw new Error('onSetting: Параметр \"handler\" должен быть функцией')\r\n  }\r\n\r\n  if (!canListen) {\r\n    return () => {}\r\n  }\r\n\r\n  const listener = (event) => handler(event.detail)\r\n\r\n  windowRef.addEventListener(KEY_EVENT(name), listener)\r\n\r\n  return () => {\r\n    try {\r\n      windowRef.removeEventListener(KEY_EVENT(name), listener)\r\n    } catch (error) {\r\n      console.error(`Ошибка при отписке от события \"${KEY_EVENT(name)}\":`, error)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Подписывает обработчик на изменение любой настройки.\r\n * Обработчик получает объект { key, value } для одиночных изменений или массив [{ key, value }] для массовых.\r\n * Возвращает функцию для отписки. Если API событий недоступно, возвращает пустую функцию.\r\n *\r\n * @param {function({key: string, value: any}|Array.<{key: string, value: any}>): void} handler - Функция-обработчик.\r\n * @returns {function(): void} Функция для отписки от события.\r\n * @throws {Error} Если handler не является функцией.\r\n * @example\r\n * const unsubscribe = onAnySetting((update) => {\r\n *   console.log('Настройки изменены:', update);\r\n * });\r\n * unsubscribe(); // Отписка от события\r\n */\r\nexport const onAnySetting = (handler) => {\r\n  if (typeof handler !== 'function') {\r\n    throw new Error('onAnySetting: Параметр \"handler\" должен быть функцией')\r\n  }\r\n\r\n  if (!canListen) {\r\n    return () => {}\r\n  }\r\n\r\n  const listener = (event) => handler(event.detail)\r\n\r\n  windowRef.addEventListener(ROOT_EVENT, listener)\r\n\r\n  return () => {\r\n    try {\r\n      windowRef.removeEventListener(ROOT_EVENT, listener)\r\n    } catch (error) {\r\n      console.error(`Ошибка при отписке от события \"${ROOT_EVENT}\":`, error)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Получает значение настройки по имени с приведением типа и значением по умолчанию.\r\n *\r\n * @param {string} [name=''] - Имя настройки, которую нужно получить.\r\n * @param {*} fallback - Значение по умолчанию, возвращаемое, если настройка не найдена или не проходит проверку типа.\r\n * @param {Function} typeguard - Функция, проверяющая тип значения настройки.\r\n *                              Должна возвращать `true`, если значение валидно, иначе `false`.\r\n * @returns {*} Значение настройки, если оно существует и проходит проверку типа, иначе значение по умолчанию.\r\n * @example\r\n * const settings = { theme: 'dark' };\r\n * const getTheme = getSettingWithCoercion('theme', 'light', (val) => typeof val === 'string');\r\n * console.log(getTheme); // 'dark'\r\n */\r\nexport const getSettingWithCoercion = (name = '', fallback, typeguard) => {\r\n  const value = name in settings ? settings[name] : fallback\r\n  return typeguard(value, fallback) ? value : fallback\r\n}","/**\r\n * --------------------------------------------------------------------------\r\n * Isvek (v1.0.0): index.js\r\n * Licensed under MIT[](https://isvek.ru/main/LICENSE.md)\r\n * --------------------------------------------------------------------------\r\n *\r\n * Основной модуль для экспорта утилит и глобальных настроек приложения.\r\n * Предоставляет доступ к настройкам WordPress и WooCommerce, а также утилитам\r\n * для работы с настройками через @strt/settings. Настройки инициализируются из\r\n * window.strtSettings и доступны через объект `api`.\r\n *\r\n * @module index\r\n */\r\n\r\nimport {\r\n  getSetting,\r\n  getSettings,\r\n  setSetting,\r\n  setSettingsBatch,\r\n  onAnySetting,\r\n  onSetting,\r\n  NAMESPACE,\r\n  getSettingWithCoercion,\r\n} from './utils.js'\r\n\r\n/**\r\n * URL админ-панели WordPress.\r\n * @type {string}\r\n */\r\nconst ADMIN_URL = getSetting('adminUrl', '')\r\n\r\n/**\r\n * URL главной страницы сайта.\r\n * @type {string}\r\n */\r\nconst HOME_URL = getSetting('homeUrl', '')\r\n\r\n/**\r\n * Флаг, указывающий, авторизован ли пользователь.\r\n * @type {boolean}\r\n */\r\nconst IS_USER_LOGGED_IN = getSetting('isUserLoggedIn', false)\r\n\r\n/**\r\n * Данные текущего пользователя или false, если пользователь не авторизован.\r\n * @type {Object|boolean}\r\n */\r\nconst CURRENT_USER = getSetting('currentUser', false)\r\n\r\n/**\r\n * Флаг, указывающий, является ли текущий пользователь администратором.\r\n * @type {boolean}\r\n */\r\nconst CURRENT_USER_IS_ADMIN = getSetting('currentUserIsAdmin', false)\r\n\r\n/**\r\n * Nonce для выполнения сброса WordPress (например, для AJAX-запросов).\r\n * @type {string}\r\n */\r\nconst WP_RESET_NONCE = getSetting('wpResetNonce', '')\r\n\r\n/**\r\n * Данные о валюте магазина WooCommerce (например, код, символ, формат).\r\n * @type {Object}\r\n */\r\nconst CURRENCY = getSetting('currency', {})\r\n\r\n/**\r\n * Единица измерения веса в WooCommerce (например, 'kg', 'g').\r\n * @type {string}\r\n */\r\nconst WEIGHT_UNIT = getSetting('weightUnit', '')\r\n\r\n/**\r\n * Список страниц магазина WooCommerce (например, myaccount, cart, checkout).\r\n * @type {Object.<string, {id: number, title: string, permalink: string}>}\r\n */\r\nconst STORE_PAGES = getSetting('storePages', {})\r\n\r\n/**\r\n * Данные изображения-заглушки для товаров WooCommerce.\r\n * @type {Object}\r\n */\r\nconst PLACEHOLDER_IMG = getSetting('placeholderImg', {})\r\n\r\n/**\r\n * Пункты меню учетной записи пользователя WooCommerce.\r\n * @type {Object.<string, {title: string, permalink: string}>}\r\n */\r\nconst ACCOUNT_MENU = getSetting('accountMenu', {})\r\n\r\n/**\r\n * Nonce для WooCommerce Store API.\r\n * @type {string}\r\n */\r\nconst WC_STORE_API_NONCE = getSetting('wcStoreApiNonce', '')\r\n\r\n/**\r\n * Данные об интеграциях API (например, сторонние сервисы).\r\n * @type {Array}\r\n */\r\nconst API = getSetting('apiIntegration', [])\r\n\r\n/**\r\n * Глобальный объект с настройками и утилитами для работы с приложением.\r\n * @typedef {Object} ApiObject\r\n * @property {function(string, any): any} getSetting - Получает значение настройки по ключу.\r\n * @property {function(): Object.<string, any>} getSettings - Возвращает копию всех настроек.\r\n * @property {function(string, any): void} setSetting - Устанавливает значение настройки и вызывает события.\r\n * @property {string} NAMESPACE - Пространство имен приложения ('strt').\r\n * @property {string} ADMIN_URL - URL админ-панели WordPress.\r\n * @property {string} HOME_URL - URL главной страницы сайта.\r\n * @property {boolean} IS_USER_LOGGED_IN - Флаг авторизации пользователя.\r\n * @property {Object|boolean} CURRENT_USER - Данные текущего пользователя.\r\n * @property {boolean} CURRENT_USER_IS_ADMIN - Флаг администратора.\r\n * @property {string} WP_RESET_NONCE - Nonce для сброса WordPress.\r\n * @property {Object} CURRENCY - Данные о валюте магазина WooCommerce.\r\n * @property {string} WEIGHT_UNIT - Единица измерения веса.\r\n * @property {Object.<string, {id: number, title: string, permalink: string}>} STORE_PAGES - Страницы магазина.\r\n * @property {Object} PLACEHOLDER_IMG - Изображение-заглушка для товаров.\r\n * @property {Object.<string, {title: string, permalink: string}>} ACCOUNT_MENU - Меню учетной записи.\r\n * @property {string} WC_STORE_API_NONCE - Nonce для Store API.\r\n * @property {Array} API - Интеграции API.\r\n */\r\n\r\n// Экспорт индивидуальных констант и утилит\r\nexport {\r\n  getSetting,\r\n  getSettings,\r\n  setSetting,\r\n  setSettingsBatch,\r\n  onAnySetting,\r\n  onSetting,\r\n  getSettingWithCoercion,\r\n  NAMESPACE,\r\n  ADMIN_URL,\r\n  HOME_URL,\r\n  IS_USER_LOGGED_IN,\r\n  CURRENT_USER,\r\n  CURRENT_USER_IS_ADMIN,\r\n  WP_RESET_NONCE,\r\n  CURRENCY,\r\n  WEIGHT_UNIT,\r\n  STORE_PAGES,\r\n  PLACEHOLDER_IMG,\r\n  ACCOUNT_MENU,\r\n  WC_STORE_API_NONCE,\r\n  API,\r\n}"],"names":["isArray","term","Array","isNull","isObject","constructor","Object","shallowEqual","a","b","isShallowEqualObjects","isShallowEqualArrays","NAMESPACE","windowRef","window","settings","ROOT_EVENT","KEY_EVENT","key","canDispatch","dispatchEvent","canListen","addEventListener","getSetting","name","fallback","arguments","length","undefined","filter","val","fb","Error","value","getSettings","setSetting","previousValue","changed","CustomEvent","detail","error","console","setSettingsBatch","updates","changedSettings","entries","forEach","_ref","prev","push","_ref2","onSetting","handler","listener","event","removeEventListener","onAnySetting","getSettingWithCoercion","typeguard","ADMIN_URL","HOME_URL","IS_USER_LOGGED_IN","CURRENT_USER","CURRENT_USER_IS_ADMIN","WP_RESET_NONCE","CURRENCY","WEIGHT_UNIT","STORE_PAGES","PLACEHOLDER_IMG","ACCOUNT_MENU","WC_STORE_API_NONCE","API"],"mappings":"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","x_google_ignoreList":[0,1]}